// Code generated by MockGen. DO NOT EDIT.
// Source: jenkins.go

// Package jenkins is a generated GoMock package.
package jenkins

import (
	gojenkins "github.com/bndr/gojenkins"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJenkins is a mock of Jenkins interface
type MockJenkins struct {
	ctrl     *gomock.Controller
	recorder *MockJenkinsMockRecorder
}

// MockJenkinsMockRecorder is the mock recorder for MockJenkins
type MockJenkinsMockRecorder struct {
	mock *MockJenkins
}

// NewMockJenkins creates a new mock instance
func NewMockJenkins(ctrl *gomock.Controller) *MockJenkins {
	mock := &MockJenkins{ctrl: ctrl}
	mock.recorder = &MockJenkinsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJenkins) EXPECT() *MockJenkinsMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockJenkins) Init() (*gojenkins.Jenkins, error) {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(*gojenkins.Jenkins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockJenkinsMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockJenkins)(nil).Init))
}

// BuildJob mocks base method
func (m *MockJenkins) BuildJob(name string, options ...interface{}) (int64, error) {
	varargs := []interface{}{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildJob", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildJob indicates an expected call of BuildJob
func (mr *MockJenkinsMockRecorder) BuildJob(name interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJob", reflect.TypeOf((*MockJenkins)(nil).BuildJob), varargs...)
}

// GetBuild mocks base method
func (m *MockJenkins) GetBuild(jobName string, number int64) (*gojenkins.Build, error) {
	ret := m.ctrl.Call(m, "GetBuild", jobName, number)
	ret0, _ := ret[0].(*gojenkins.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild
func (mr *MockJenkinsMockRecorder) GetBuild(jobName, number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockJenkins)(nil).GetBuild), jobName, number)
}

// GetAllBuildIds mocks base method
func (m *MockJenkins) GetAllBuildIds(job string) ([]gojenkins.JobBuild, error) {
	ret := m.ctrl.Call(m, "GetAllBuildIds", job)
	ret0, _ := ret[0].([]gojenkins.JobBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBuildIds indicates an expected call of GetAllBuildIds
func (mr *MockJenkinsMockRecorder) GetAllBuildIds(job interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBuildIds", reflect.TypeOf((*MockJenkins)(nil).GetAllBuildIds), job)
}
