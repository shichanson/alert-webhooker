// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package config is a generated GoMock package.
package config

import (
	gomock "github.com/golang/mock/gomock"
	viper "github.com/spf13/viper"
	io "io"
	reflect "reflect"
)

// Mockconfiger is a mock of configer interface
type Mockconfiger struct {
	ctrl     *gomock.Controller
	recorder *MockconfigerMockRecorder
}

// MockconfigerMockRecorder is the mock recorder for Mockconfiger
type MockconfigerMockRecorder struct {
	mock *Mockconfiger
}

// NewMockconfiger creates a new mock instance
func NewMockconfiger(ctrl *gomock.Controller) *Mockconfiger {
	mock := &Mockconfiger{ctrl: ctrl}
	mock.recorder = &MockconfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockconfiger) EXPECT() *MockconfigerMockRecorder {
	return m.recorder
}

// SetConfigType mocks base method
func (m *Mockconfiger) SetConfigType(in string) {
	m.ctrl.Call(m, "SetConfigType", in)
}

// SetConfigType indicates an expected call of SetConfigType
func (mr *MockconfigerMockRecorder) SetConfigType(in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*Mockconfiger)(nil).SetConfigType), in)
}

// ReadConfig mocks base method
func (m *Mockconfiger) ReadConfig(in io.Reader) error {
	ret := m.ctrl.Call(m, "ReadConfig", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig
func (mr *MockconfigerMockRecorder) ReadConfig(in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*Mockconfiger)(nil).ReadConfig), in)
}

// AddRemoteProvider mocks base method
func (m *Mockconfiger) AddRemoteProvider(provider, endpoint, path string) error {
	ret := m.ctrl.Call(m, "AddRemoteProvider", provider, endpoint, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRemoteProvider indicates an expected call of AddRemoteProvider
func (mr *MockconfigerMockRecorder) AddRemoteProvider(provider, endpoint, path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteProvider", reflect.TypeOf((*Mockconfiger)(nil).AddRemoteProvider), provider, endpoint, path)
}

// ReadRemoteConfig mocks base method
func (m *Mockconfiger) ReadRemoteConfig() error {
	ret := m.ctrl.Call(m, "ReadRemoteConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadRemoteConfig indicates an expected call of ReadRemoteConfig
func (mr *MockconfigerMockRecorder) ReadRemoteConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRemoteConfig", reflect.TypeOf((*Mockconfiger)(nil).ReadRemoteConfig))
}

// Unmarshal mocks base method
func (m *Mockconfiger) Unmarshal(rawVal interface{}, opts ...viper.DecoderConfigOption) error {
	varargs := []interface{}{rawVal}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockconfigerMockRecorder) Unmarshal(rawVal interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{rawVal}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*Mockconfiger)(nil).Unmarshal), varargs...)
}

// WatchRemoteConfig mocks base method
func (m *Mockconfiger) WatchRemoteConfig() error {
	ret := m.ctrl.Call(m, "WatchRemoteConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchRemoteConfig indicates an expected call of WatchRemoteConfig
func (mr *MockconfigerMockRecorder) WatchRemoteConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteConfig", reflect.TypeOf((*Mockconfiger)(nil).WatchRemoteConfig))
}
