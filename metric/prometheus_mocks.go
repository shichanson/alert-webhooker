// Code generated by MockGen. DO NOT EDIT.
// Source: prometheus.go

// Package metric is a generated GoMock package.
package metric

import (
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockincomeTasks is a mock of incomeTasks interface
type MockincomeTasks struct {
	ctrl     *gomock.Controller
	recorder *MockincomeTasksMockRecorder
}

// MockincomeTasksMockRecorder is the mock recorder for MockincomeTasks
type MockincomeTasksMockRecorder struct {
	mock *MockincomeTasks
}

// NewMockincomeTasks creates a new mock instance
func NewMockincomeTasks(ctrl *gomock.Controller) *MockincomeTasks {
	mock := &MockincomeTasks{ctrl: ctrl}
	mock.recorder = &MockincomeTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockincomeTasks) EXPECT() *MockincomeTasksMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method
func (m *MockincomeTasks) WithLabelValues(lvs ...string) prometheus.Counter {
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues
func (mr *MockincomeTasksMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockincomeTasks)(nil).WithLabelValues), lvs...)
}

// MockexcutedTasks is a mock of excutedTasks interface
type MockexcutedTasks struct {
	ctrl     *gomock.Controller
	recorder *MockexcutedTasksMockRecorder
}

// MockexcutedTasksMockRecorder is the mock recorder for MockexcutedTasks
type MockexcutedTasksMockRecorder struct {
	mock *MockexcutedTasks
}

// NewMockexcutedTasks creates a new mock instance
func NewMockexcutedTasks(ctrl *gomock.Controller) *MockexcutedTasks {
	mock := &MockexcutedTasks{ctrl: ctrl}
	mock.recorder = &MockexcutedTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockexcutedTasks) EXPECT() *MockexcutedTasksMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method
func (m *MockexcutedTasks) WithLabelValues(lvs ...string) prometheus.Observer {
	varargs := []interface{}{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Observer)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues
func (mr *MockexcutedTasksMockRecorder) WithLabelValues(lvs ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockexcutedTasks)(nil).WithLabelValues), lvs...)
}
