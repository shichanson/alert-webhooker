// Code generated by MockGen. DO NOT EDIT.
// Source: blocker.go

// Package blocker is a generated GoMock package.
package blocker

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockcacher is a mock of cacher interface
type Mockcacher struct {
	ctrl     *gomock.Controller
	recorder *MockcacherMockRecorder
}

// MockcacherMockRecorder is the mock recorder for Mockcacher
type MockcacherMockRecorder struct {
	mock *Mockcacher
}

// NewMockcacher creates a new mock instance
func NewMockcacher(ctrl *gomock.Controller) *Mockcacher {
	mock := &Mockcacher{ctrl: ctrl}
	mock.recorder = &MockcacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockcacher) EXPECT() *MockcacherMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *Mockcacher) Get(key []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockcacherMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcacher)(nil).Get), key)
}

// Set mocks base method
func (m *Mockcacher) Set(key, value []byte, expireSeconds int) error {
	ret := m.ctrl.Call(m, "Set", key, value, expireSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockcacherMockRecorder) Set(key, value, expireSeconds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockcacher)(nil).Set), key, value, expireSeconds)
}

// Del mocks base method
func (m *Mockcacher) Del(key []byte) bool {
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockcacherMockRecorder) Del(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*Mockcacher)(nil).Del), key)
}
